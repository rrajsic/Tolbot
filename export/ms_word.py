import docx
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml import parse_xml
from docx.oxml.ns import nsdecls
from json_handler import JSONHandler

class MSWord():
    def __init__(self, json_handler):
        self.json_handler = json_handler

        self.doc = docx.Document()
        self.data = json_handler.import_from_json()

    def save(self, project_name):
        tol_name = project_name + "_TOL.docx"
        self.doc.save(tol_name)

    def create_cover_page(self, project_name, team_name):
        for i in range(6):
            self.doc.add_paragraph()

        project_name_par = self.doc.add_paragraph()
        project_name_run = project_name_par.add_run(project_name)
        project_name_run.font.size = Pt(16)
        project_name_par.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        project_name_run.font.name="Cambria"

        title = self.doc.add_paragraph()
        title_run = title.add_run("TOL")
        title_run.font.size = Pt(66)
        title_run.bold = True
        title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        title_run.font.name="Ericsson Capital TT"

        team_name_par = self.doc.add_paragraph()
        team_name_run = team_name_par.add_run(team_name)
        team_name_run.font.size = Pt(16)
        team_name_par.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        team_name_run.font.name="Cambria"

        for i in range(13):
            self.doc.add_paragraph()

        footnote = self.doc.add_paragraph()
        footnote_run = footnote.add_run("Generated by TOLBOTâ„¢")
        footnote_run.font.size = Pt(10)
        footnote.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        footnote_run.font.name="Ericsson Hilda Mono ExtraLight"

    def count_elements(self,test_list):
        count = 0
        for i in test_list:
            if isinstance(i, list):
                count += self.count_elements(i)
            else:
                count +=1
        return count

    def create_statistic_page(self, suites, tests):
        test_count = self.doc.add_paragraph()
        test_count_run = test_count.add_run(f"Total test count: {self.count_elements(tests)}")
        test_count_run.font.size = Pt(16)
        test_count.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
        test_count_run.font.name="Ericsson Capital TT"

        self.doc.add_paragraph()
        self.doc.add_paragraph()

        table_title = self.doc.add_heading("Files Impacted", level=1)
        table_title_run = table_title.runs[0]
        table_title_run.font.size = Pt(18)
        table_title_run.font.name="Ericsson Hilda"
        table_title_run.font.italic = True
        table_title.paragraph_format.space_after = Pt(10)

        suite_names = []
        for repo_names in suites:
            for suite_name in repo_names:
                if '/COMMIT_MSG' in suite_name:
                    continue
                suite_names.append(suite_name)
        suites_table = self.doc.add_table(rows=len(suite_names),cols=1)
        for i, row_data in enumerate(suite_names):
            cell = suites_table.cell(i, 0)
            cell.text = row_data
            cell_element = cell._element
            tcPr = cell_element.get_or_add_tcPr()
            borders = parse_xml(
                r'<w:tcBorders ' + nsdecls('w') +
                r'><w:top w:val="single" w:sz="4"/>' +
                r'<w:left w:val="single" w:sz="4"/>' +
                r'<w:bottom w:val="single" w:sz="4"/>' +
                r'<w:right w:val="single" w:sz="4"/></w:tcBorders>'
            )
            tcPr.append(borders)

        self.doc.add_page_break()

    def fill_test_data(self, repo, tests):

        repo_name_heading = self.doc.add_heading(repo, level=1)
        repo_name_run = repo_name_heading.runs[0]
        repo_name_run.font.name = 'Ericsson Hilda'
        repo_name_run.font.size = Pt(20)
        repo_name_heading.paragraph_format.space_after = Pt(12)

        for test in tests:
            for key, value in test.items():
                if key == "NAME":
                    test_name_heading = self.doc.add_heading(value, level=2)
                    test_name_run = test_name_heading.runs[0]
                    test_name_run.font.name = 'Ericsson Hilda ExtraLight'
                    test_name_run.font.size = Pt(18)
                    test_name_heading.paragraph_format.space_after = Pt(10)

                else:
                    test_data_heading = self.doc.add_heading(key, level = 3)
                    test_data_run = test_data_heading.runs[0]
                    test_data_run.font.name = 'Ericsson Hilda Light'
                    test_data_run.font.size = Pt(13)
                    test_data_run.font.italic = True
                    test_data_run.font.bold = False
                    test_data_heading.paragraph_format.space_before = Pt(3)
                    test_data_heading.paragraph_format.space_after = Pt(3)

                    test_text = self.doc.add_paragraph()
                    test_text_run = test_text.add_run(value)
                    test_text_run.font.size = Pt(10)
                    test_text_run.font.name="Ericsson Hilda"
                    
            self.doc.add_page_break()

    def export(self):
        self.create_cover_page(self.data['project_name'], self.data['team_name'])
        self.create_statistic_page(self.data["files"], self.data["tests"])

        for repo, test in zip(self.data["repos"], self.data["tests"]):
            self.fill_test_data(repo, test)
        return self.save(self.data["project_name"])
